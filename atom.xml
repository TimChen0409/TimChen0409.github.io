<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tim Chen&#39;s Blog</title>
  
  <subtitle>我寫的不是Code，是一種感覺</subtitle>
  <link href="https://timchen0409.github.io/atom.xml" rel="self"/>
  
  <link href="https://timchen0409.github.io/"/>
  <updated>2021-01-06T12:51:25.000Z</updated>
  <id>https://timchen0409.github.io/</id>
  
  <author>
    <name>Tim Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LINQ Any() 和 Count()效能差異比較</title>
    <link href="https://timchen0409.github.io/2020/12/17/net-linq-any-count/"/>
    <id>https://timchen0409.github.io/2020/12/17/net-linq-any-count/</id>
    <published>2020-12-17T13:30:40.000Z</published>
    <updated>2021-01-06T12:51:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在讀一本電子書：<em>LINQ Succinctly</em><br>內容從LINQ觀念到實作都有介紹，以新手來說一百頁左右的內容算很好上手，其中內容有一段敘述引起我的好奇</p><blockquote><p>Using Any() instead of Count() != 0 usually conveys the intent of the code better, and in some circumstances, can perform better.</p></blockquote><p>因為本人過往在撰寫程式時，習慣使用Count()來判斷集合中是否有物件，所以就來測試看看</p><a id="more"></a><h2 id="List比較"><a href="#List比較" class="headerlink" title="List比較"></a>List比較</h2><p>我們先建立一個Product類別，然後使用For迴圈建立一個Product的List集合，之後使用StopWatch去測量已耗用時間<br>除了上述兩種情況，這邊額外新增測試 List 的 Count屬性<br>我們新增一個主控台應用程式，範例程式碼如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AnyCountTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//建立資料</span></span><br><span class="line">            List&lt;Product&gt; products = <span class="keyword">new</span> List&lt;Product&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                products.Add(<span class="keyword">new</span> Product &#123; Id = Guid.NewGuid(), Name = <span class="string">$&quot;Product<span class="subst">&#123;i&#125;</span>&quot;</span>, No = i &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;------------------------------List集合開始測試&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sw.Restart();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (products.Count != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sw.Stop();</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Count屬性：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sw.Restart();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (products.Count() != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sw.Stop();</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Count()  ：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sw.Restart();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (products.Any())</span><br><span class="line">                    &#123;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sw.Stop();</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Any      ：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>次測試完畢--------------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> No &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>讓我們來看看輸出結果：<br><img src="/img/20201217/0.png"></p><blockquote><p>Count&gt;Count()&gt;Any()</p></blockquote><p>從上述的結果可以看到如果有 <code>Count</code> 屬性時，效率最佳所以一定優先使用，<code>Count()</code>比<code>Any()</code>好，因為如果來源的執行個體型別有實作ICollection<code>&lt;T&gt;</code>，則會直接取用Count屬性，但這邊100萬筆資料來看，三者效能差異不會差得太過誇張，再來我們看一下Linq-to-Entities</p><h2 id="Linq-to-Entities比較"><a href="#Linq-to-Entities比較" class="headerlink" title="Linq-to-Entities比較"></a>Linq-to-Entities比較</h2><p>首先在專案的 NuGet 安裝 EntityFramework 套件，之後我們先在DB準備好5000筆的商品資料<br><img src="/img/20201217/1.png"><br>過程不是這篇重點所以略過，這邊自己可以選擇哪種做法比較方便，我是採用DB First方式，再寫迴圈把資料灌入資料表<br>準備好資料後開始測試，程式碼範例如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AnyCountTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (LinqTestEntities1 db = <span class="keyword">new</span> LinqTestEntities1())</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取得資料</span></span><br><span class="line">                <span class="keyword">var</span> products = <span class="keyword">from</span> i <span class="keyword">in</span> db.Product</span><br><span class="line">                               <span class="keyword">select</span> i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">                <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;------------------------------Entity集合開始測試&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    sw.Restart();</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (products.Count() != <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            num++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    sw.Stop();</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Count()  ：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    sw.Restart();</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (products.Any())</span><br><span class="line">                        &#123;</span><br><span class="line">                            num++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    sw.Stop();</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Any      ：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>次測試完畢--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果：<br><img src="/img/20201217/2.png"></p><blockquote><p>Any()&gt;Count()</p></blockquote><p>這邊看到結果，因為第一次執行的時候會經過JIT編譯，這會造成第一次呼叫時比較花時間，所以第一次測試結果可以跳過不參考。總共資料有5000筆，可以看出效率上<code>Count()</code>就比<code>Any()</code>慢上許多，所以這邊就務必去使用Any()去作判斷</p><h2 id="Linq-to-Entities比較-附加條件"><a href="#Linq-to-Entities比較-附加條件" class="headerlink" title="Linq-to-Entities比較(附加條件)"></a>Linq-to-Entities比較(附加條件)</h2><p><code>Count()</code> 和 <code>Any()</code> 各自都含有另一個多載方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//傳回數字，代表指定之序列中符合條件的項目數目</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>&lt;<span class="title">TSource</span>&gt; (<span class="params"><span class="keyword">this</span> System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="built_in">bool</span>&gt; predicate</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判斷序列的任何項目是否符合條件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Any</span>&lt;<span class="title">TSource</span>&gt; (<span class="params"><span class="keyword">this</span> System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="built_in">bool</span>&gt; predicate</span>)</span>;</span><br></pre></td></tr></table></figure><p>所以讓我們來改寫一下上面的程式碼，為兩個方法新增條件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AnyCountTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (LinqTestEntities1 db = <span class="keyword">new</span> LinqTestEntities1())</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取得資料</span></span><br><span class="line">                <span class="keyword">var</span> products = <span class="keyword">from</span> i <span class="keyword">in</span> db.Product</span><br><span class="line">                               <span class="keyword">select</span> i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">                <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;------------------------------Entity集合開始測試&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    sw.Restart();</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (products.Count(x =&gt; x.No &gt; <span class="number">1000</span>) != <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            num++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    sw.Stop();</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Count()  ：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    sw.Restart();</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> products)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (products.Any(x =&gt; x.No &gt; <span class="number">1000</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            num++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    sw.Stop();</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Any      ：<span class="subst">&#123;sw.Elapsed&#125;</span>&quot;</span>);</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>次測試完畢--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果：<br><img src="/img/20201217/3.png"></p><blockquote><p>Any()&gt;Count()</p></blockquote><p>這邊可以看到，比起剛剛無條件的情況，加入條件時效能差異更大了，如果資料量變大，後果可不堪設想…所以這邊也務必使用<code>Any()</code></p><p>另外當 <code>Count()</code> 遇到使用 yield return 時，也會出現效能問題，所以也應該盡量避免使用，詳細原因可以參考下面小朱大的文章</p><p><em>這邊提醒一下條件使用 Count() != 0 或 Count() &gt; 0皆不影響上述的測試結果</em></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>如果能用 Count 屬性時，一定要用，若是 Linq-to-Entities，沒有 Count 屬性可用，請務必優先使用 Any() 方法，在參考資料有更多詳細的解說，可以多參考，這篇文章用簡單的範例去做效能測試驗證，希望能用淺顯易懂的方式讓大家了解囉</p><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="https://dotblogs.com.tw/regionbbs/2013/04/10/when_to_use_any_or_count_in_linq">小朱® 的技術隨手寫 - Any() vs. Count() 何時可用? 何時不可用?</a></p><p><a href="https://stackoverflow.com/questions/305092/which-method-performs-better-any-vs-count-0">Which method performs better: .Any() vs .Count() &gt; 0?</a></p><p><a href="https://stackoverflow.com/questions/2856965/query-result-what-should-i-use-count-or-any">query result what should i use Count() or Any()</a></p><p><a href="https://stackoverflow.com/questions/7969354/count-property-vs-count-method">Count property vs Count() method?</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在讀一本電子書：&lt;em&gt;LINQ Succinctly&lt;/em&gt;&lt;br&gt;內容從LINQ觀念到實作都有介紹，以新手來說一百頁左右的內容算很好上手，其中內容有一段敘述引起我的好奇&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using Any() instead of Count() != 0 usually conveys the intent of the code better, and in some circumstances, can perform better.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為本人過往在撰寫程式時，習慣使用Count()來判斷集合中是否有物件，所以就來測試看看&lt;/p&gt;</summary>
    
    
    
    <category term=".NET" scheme="https://timchen0409.github.io/categories/NET/"/>
    
    
    <category term="Backend" scheme="https://timchen0409.github.io/tags/Backend/"/>
    
    <category term="C#" scheme="https://timchen0409.github.io/tags/C/"/>
    
    <category term=".NET" scheme="https://timchen0409.github.io/tags/NET/"/>
    
    <category term="LINQ" scheme="https://timchen0409.github.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core - 使用 NLog 紀錄日誌資訊</title>
    <link href="https://timchen0409.github.io/2020/12/11/net-core-nlog/"/>
    <id>https://timchen0409.github.io/2020/12/11/net-core-nlog/</id>
    <published>2020-12-10T16:38:40.000Z</published>
    <updated>2021-01-06T12:57:48.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在所有程式系統中，Log紀錄是不可或缺的部份，我們可以查看產生的錯誤訊息，快速的找出問題點。.NET中有許多好用的Log工具(如NLog、Log4net等等)提供簡單好使用的方式讓我們輕鬆地可以將需要的資訊生成相關日誌內容，另外.NET Core 提供了標準化的 Log (Microsoft.Extensions.Logging)，支援多種 Log 輸出，而Nlog就是其中之一</p><p>因為第一次在專案內使用，在這邊簡單的紀錄該套件的基本使用，方便自己之後建立新專案時參考，若有問題或任何建議歡迎提出一起討論</p><a id="more"></a><h2 id="Nlog介紹"><a href="#Nlog介紹" class="headerlink" title="Nlog介紹"></a>Nlog介紹</h2><p>套件Github首頁：<a href="https://github.com/NLog/NLog">https://github.com/NLog/NLog</a><br>Github Wiki：<a href="https://github.com/nlog/nlog/wiki">https://github.com/nlog/nlog/wiki</a></p><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>可以在程式裡去處理已知異常(捕捉try…catch)，並依據異常狀況給予不同等級</li><li>可以依據使用者定義的等級做後續不同處理方式的操作</li></ul><h3 id="Log儲存方式"><a href="#Log儲存方式" class="headerlink" title="Log儲存方式:"></a>Log儲存方式:</h3><p>常見的做法是儲存到文字檔、資料庫或是寄送E-mail通知<br>還有一些比較新潮的做法是搭配用SignalR推播、直接把log丟到Slack等等<br>現在讓我們來進行實作一下</p><h2 id="新增-NET-Core-API-專案"><a href="#新增-NET-Core-API-專案" class="headerlink" title="新增.NET Core API 專案"></a>新增.NET Core API 專案</h2><p>這邊使用.NET Core API 專案來方便展示<br><img src="/img/20201211/0.png"></p><h2 id="安裝-Nlog"><a href="#安裝-Nlog" class="headerlink" title="安裝 Nlog"></a>安裝 Nlog</h2><p>透過 NuGet 安裝 Nlog 到專案中<br><img src="/img/20201211/1.png"></p><h2 id="新增-Nlog-config"><a href="#新增-Nlog-config" class="headerlink" title="新增 Nlog.config"></a>新增 Nlog.config</h2><p>放在Asp .net core專案的root 資料夾上<br>新增方式有兩種：<br>1.自己手動新增檔案<br>2.安裝套件NLog.config自動產生檔案<br>這裡可依照喜好自行選擇，這裡採用官網Wiki的方式手動建立，以下使用官網的範例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autoReload</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogLevel</span>=<span class="string">&quot;Info&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogFile</span>=<span class="string">&quot;c:\temp\internal-nlog.txt&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- enable asp.net core layout renderers --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">assembly</span>=<span class="string">&quot;NLog.Web.AspNetCore&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- the targets to write to --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- write logs to file  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">name</span>=<span class="string">&quot;allfile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;c:\temp\nlog-all-$&#123;shortdate&#125;.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;$&#123;longdate&#125;|$&#123;event-properties:item=EventId_Id&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;logger&#125;|$&#123;message&#125; $&#123;exception:format=tostring&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- another file log, only own logs. Uses some ASP.NET core renderers --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ownFile-web&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;c:\temp\nlog-own-$&#123;shortdate&#125;.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;$&#123;longdate&#125;|$&#123;event-properties:item=EventId_Id&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;logger&#125;|$&#123;message&#125; $&#123;exception:format=tostring&#125;|url: $&#123;aspnet-request-url&#125;|action: $&#123;aspnet-mvc-action&#125;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- rules to map from logger name to target --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--All logs, including from Microsoft--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Trace&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;allfile&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Skip non-critical Microsoft logs and so log only own logs--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;Microsoft.*&quot;</span> <span class="attr">maxlevel</span>=<span class="string">&quot;Info&quot;</span> <span class="attr">final</span>=<span class="string">&quot;true&quot;</span> /&gt;</span> <span class="comment">&lt;!-- BlackHole without writeTo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Trace&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;ownFile-web&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這邊來講解一下該設定檔，內容常設定的有 <code>&lt;targets&gt;</code> 及 <code>&lt;rules&gt;</code> 兩大塊，分別可設定輸出規則及log寫入規則，兩者必須要搭配使用：</p><ul><li>targets 用來定義寫入log 格式、儲存的檔案位置與檔名</li><li>rules裡面可以自訂Log寫入規則，例如指定logger名稱、最小LogLevel等，最重要的是要指定輸出的target(writeTo)<blockquote><p>一條rule至少要指定一個對應的target，但也可以輸出給多個target，而一個target也可以對應多個rule</p></blockquote></li></ul><p>另外NLog 根節點上也有一些功能可以設定開關，這邊提及幾個較常用的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autoReload</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">throwExceptions</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogLevel</span>=<span class="string">&quot;Info&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogFile</span>=<span class="string">&quot;c:\temp\internal-nlog.txt&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>autoReload</code>：在NLog.config修改時自動載入</li><li><code>throwExceptions</code>：Nlog預設會忽略所有發生的錯誤(Ex:無法寫入Log)，當需要偵錯時可以設定為 <code>true</code>，開啟後便可以知道為什麼沒成功寫入Log。</li></ul><p>如果NLog無法正常寫入時，則可能需要啟用內部日誌記錄。</p><ul><li><code>internalLogLevel=&quot;Off|Trace|Debug|Info|Warn|Error|Fatal&quot;</code>：設定內部日誌級別。級別越高，內部日誌輸出越詳細。</li><li><code>internalLogFile</code>：設定內部日誌紀錄檔案寫入的位置。</li></ul><h2 id="設定-nlog-config-輸出至目錄-方式"><a href="#設定-nlog-config-輸出至目錄-方式" class="headerlink" title="設定 nlog.config 輸出至目錄 方式"></a>設定 nlog.config 輸出至目錄 方式</h2><p>設定 config 檔案的屬性 複製至輸出目錄 為 <strong>有更新時才複製</strong> 或 <strong>永遠複製</strong>，已確保執行時能找到最新狀態的 nlog.config 檔案<br><img src="/img/20201211/2.png"></p><h2 id="更新-Program-cs"><a href="#更新-Program-cs" class="headerlink" title="更新 Program.cs"></a>更新 Program.cs</h2><p>這邊參考官網的教學，加入命名空間，清掉預設的 Log Provider，並使用UseNLog()注入DI</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> NLog.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NlogExercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> logger = NLogBuilder.ConfigureNLog(<span class="string">&quot;nlog.config&quot;</span>).GetCurrentClassLogger();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                logger.Debug(<span class="string">&quot;init main&quot;</span>);</span><br><span class="line">                CreateHostBuilder(args).Build().Run();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//NLog: catch setup errors</span></span><br><span class="line">                logger.Error(exception, <span class="string">&quot;Stopped program because of exception&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)</span></span><br><span class="line">                NLog.LogManager.Shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureLogging(logging =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    logging.ClearProviders();</span><br><span class="line">                    logging.SetMinimumLevel(LogLevel.Trace);</span><br><span class="line">                &#125;)</span><br><span class="line">                .UseNLog(); <span class="comment">// NLog: setup NLog for Dependency injection</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="調整-appsettings-json"><a href="#調整-appsettings-json" class="headerlink" title="調整 appsettings.json"></a>調整 appsettings.json</h2><p>調整 appsettings.json，否則 appsettings.json 會將 SetMinimumLevel 設定覆蓋掉</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;IncludeScopes&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Default&quot;</span>: <span class="string">&quot;Trace&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Microsoft&quot;</span>: <span class="string">&quot;Warning&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Microsoft.Hosting.Lifetime&quot;</span>: <span class="string">&quot;Information&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這邊依需求情境為主，如果沒有做SetMinimumLevel設定則不用特別修改appsettings.json</p></blockquote><h2 id="寫入日誌紀錄"><a href="#寫入日誌紀錄" class="headerlink" title="寫入日誌紀錄"></a>寫入日誌紀錄</h2><p>接著只要在需要的地方注入 ILogger<T>來紀錄log，我們開啟預設的 WeatherForecastController ，確認在建構子有注入ILogger，然後就可以於Get方法中輸出Log記錄了<br><img src="/img/20201211/4.png"></p><h2 id="查看日誌"><a href="#查看日誌" class="headerlink" title="查看日誌"></a>查看日誌</h2><p>當我們執行該Web Api專案後，在我們輸出日誌的資料夾會產出三個檔案<br><img src="/img/20201211/5.png"></p><p>internal-nlog.txt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-12-10 14:35:02.5675 Info Message Template Auto Format enabled</span><br><span class="line">2020-12-10 14:35:02.5858 Info Loading assembly: NLog.Web.AspNetCore</span><br><span class="line">2020-12-10 14:35:02.6625 Info Adding target FileTarget(Name&#x3D;allfile)</span><br><span class="line">2020-12-10 14:35:02.6625 Info Adding target FileTarget(Name&#x3D;ownFile-web)</span><br><span class="line">2020-12-10 14:35:02.7270 Info Validating config: TargetNames&#x3D;allfile, ownFile-web, ConfigItems&#x3D;45, FilePath&#x3D;C:\Users\SENB_014\source\repos\NlogExercise\NlogExercise\bin\Debug\netcoreapp3.1\nlog.config</span><br></pre></td></tr></table></figure><p>nlog-all-2020-12-10.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-12-10 14:35:02.7922||DEBUG|NlogExercise.Program|init main </span><br><span class="line">2020-12-10 14:35:04.5343||INFO|Microsoft.Hosting.Lifetime|Now listening on: https:&#x2F;&#x2F;localhost:5001 </span><br><span class="line">2020-12-10 14:35:04.5463||INFO|Microsoft.Hosting.Lifetime|Now listening on: http:&#x2F;&#x2F;localhost:5000 </span><br><span class="line">2020-12-10 14:35:04.5463||INFO|Microsoft.Hosting.Lifetime|Application started. Press Ctrl+C to shut down. </span><br><span class="line">2020-12-10 14:35:04.5463||INFO|Microsoft.Hosting.Lifetime|Hosting environment: Development </span><br><span class="line">2020-12-10 14:35:04.5463||INFO|Microsoft.Hosting.Lifetime|Content root path: C:\Users\SENB_014\source\repos\NlogExercise\NlogExercise </span><br><span class="line">2020-12-10 14:35:05.7936||INFO|NlogExercise.Controllers.WeatherForecastController|--Information-- </span><br><span class="line">2020-12-10 14:35:05.7936||WARN|NlogExercise.Controllers.WeatherForecastController|Warning </span><br><span class="line">2020-12-10 14:35:05.7936||ERROR|NlogExercise.Controllers.WeatherForecastController|--Error-- </span><br><span class="line">2020-12-10 14:35:05.7936||FATAL|NlogExercise.Controllers.WeatherForecastController|--Critical-- </span><br></pre></td></tr></table></figure><p>nlog-own-2020-12-10.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-12-10 14:35:02.7922||DEBUG|NlogExercise.Program|init main |url: |action: </span><br><span class="line">2020-12-10 14:35:05.7936||INFO|NlogExercise.Controllers.WeatherForecastController|--Information-- |url: https:&#x2F;&#x2F;localhost&#x2F;weatherforecast|action: Get</span><br><span class="line">2020-12-10 14:35:05.7936||WARN|NlogExercise.Controllers.WeatherForecastController|Warning |url: https:&#x2F;&#x2F;localhost&#x2F;weatherforecast|action: Get</span><br><span class="line">2020-12-10 14:35:05.7936||ERROR|NlogExercise.Controllers.WeatherForecastController|--Error-- |url: https:&#x2F;&#x2F;localhost&#x2F;weatherforecast|action: Get</span><br><span class="line">2020-12-10 14:35:05.7936||FATAL|NlogExercise.Controllers.WeatherForecastController|--Critical-- |url: https:&#x2F;&#x2F;localhost&#x2F;weatherforecast|action: Get</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇簡單分享 NLog 在 .NET Core 的使用方式並運用在專案中，設定上十分友善，至於許多客製化的設定可以參考官方的文件，之後有時間再和大家分享儲存log至其他地方的用法</p><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-3">Getting-started-with-ASP.NET-Core-3</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在所有程式系統中，Log紀錄是不可或缺的部份，我們可以查看產生的錯誤訊息，快速的找出問題點。.NET中有許多好用的Log工具(如NLog、Log4net等等)提供簡單好使用的方式讓我們輕鬆地可以將需要的資訊生成相關日誌內容，另外.NET Core 提供了標準化的 Log (Microsoft.Extensions.Logging)，支援多種 Log 輸出，而Nlog就是其中之一&lt;/p&gt;
&lt;p&gt;因為第一次在專案內使用，在這邊簡單的紀錄該套件的基本使用，方便自己之後建立新專案時參考，若有問題或任何建議歡迎提出一起討論&lt;/p&gt;</summary>
    
    
    
    <category term=".NETCore" scheme="https://timchen0409.github.io/categories/NETCore/"/>
    
    
    <category term=".NET Core" scheme="https://timchen0409.github.io/tags/NET-Core/"/>
    
    <category term="Backend" scheme="https://timchen0409.github.io/tags/Backend/"/>
    
    <category term="C#" scheme="https://timchen0409.github.io/tags/C/"/>
    
    <category term="Nlog" scheme="https://timchen0409.github.io/tags/Nlog/"/>
    
  </entry>
  
  <entry>
    <title>在.NET Core 使用 AutoMapper 輕鬆轉換類別</title>
    <link href="https://timchen0409.github.io/2020/12/08/net-core-automapper/"/>
    <id>https://timchen0409.github.io/2020/12/08/net-core-automapper/</id>
    <published>2020-12-08T07:58:50.000Z</published>
    <updated>2021-01-06T13:02:41.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在撰寫專案時，經常會碰到資料類別對映的處理，例如ViewModel和實際Entity之間的對應，或是層與層之間的轉換。常見的處理方式如下：</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = employeeList.Select(x =&gt; <span class="keyword">new</span> EmployeeViewModel</span><br><span class="line">    &#123;</span><br><span class="line">        Id = x.Id,</span><br><span class="line">        Name = x.Name,</span><br><span class="line">        Phone = x.Phone</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或是</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;EmployeeViewModel&gt; result = <span class="keyword">new</span> List&lt;EmployeeViewModel&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> employee <span class="keyword">in</span> employeeList)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Add(<span class="keyword">new</span> EmployeeViewModel()</span><br><span class="line">        &#123;</span><br><span class="line">            Id = employee.Id,</span><br><span class="line">            Name=employee.Name,</span><br><span class="line">            Phone=employee.Phone</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果欄位變多的話，程式碼會變得很冗長，這時候就可以使用今天的主角 AutoMapper 來做這樣的處理。</p><h2 id="AutoMapper介紹"><a href="#AutoMapper介紹" class="headerlink" title="AutoMapper介紹"></a>AutoMapper介紹</h2><p>套件Github首頁：<a href="https://github.com/AutoMapper/AutoMapper">https://github.com/AutoMapper/AutoMapper</a><br>文件頁：<a href="https://docs.automapper.org/en/stable/index.html">https://docs.automapper.org/en/stable/index.html</a></p><p>AutoMapper 是一個類別對映轉換的套件，可以快速且簡單實現類別對映的處理，並減少繁瑣的程式碼。</p><h2 id="新增-NET-Core-MVC專案"><a href="#新增-NET-Core-MVC專案" class="headerlink" title="新增.NET Core MVC專案"></a>新增.NET Core MVC專案</h2><p>這邊使用.NET Core MVC專案來方便展示<br><img src="/img/20201208/0.png"></p><h2 id="測試環境設定"><a href="#測試環境設定" class="headerlink" title="測試環境設定"></a>測試環境設定</h2><p>新增Model,ViewModel , Controller 和 View，這邊直接產生資料並展示在View上</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Phone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmployeeViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Phone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Controller：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AutomapperCore.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmployeeController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Employee&gt; _employeeList;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EmployeeController</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _employeeList = <span class="keyword">new</span> List&lt;Employee&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Employee&#123; Id=<span class="number">1</span>, Name=<span class="string">&quot;Amy&quot;</span>, Phone=<span class="string">&quot;0911334455&quot;</span>, Age=<span class="number">25</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Employee&#123; Id=<span class="number">2</span>, Name=<span class="string">&quot;Tom&quot;</span>, Phone=<span class="string">&quot;0912554433&quot;</span>, Age=<span class="number">28</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Employee&#123; Id=<span class="number">3</span>, Name=<span class="string">&quot;Andy&quot;</span>, Phone=<span class="string">&quot;0912112299&quot;</span>, Age=<span class="number">30</span> &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = employeeList.Select(x =&gt; <span class="keyword">new</span> EmployeeViewModel</span><br><span class="line">            &#123;</span><br><span class="line">                Id = x.Id,</span><br><span class="line">                Name = x.Name,</span><br><span class="line">                Phone = x.Phone</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> View(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>View：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@model IEnumerable&lt;AutomapperCore.Models.EmployeeViewModel&gt;</span><br><span class="line"></span><br><span class="line">&lt;table <span class="keyword">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.Id)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.Name)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.Phone)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        @foreach (<span class="keyword">var</span> item <span class="keyword">in</span> Model)</span><br><span class="line">        &#123;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.Id)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.Name)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.Phone)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/20201208/1.png"></p><h2 id="使用AutoMapper"><a href="#使用AutoMapper" class="headerlink" title="使用AutoMapper"></a>使用AutoMapper</h2><p>透過 NuGet 安裝 AutoMapper 到專案中</p><p><img src="/img/20201208/2.png"></p><p>基本使用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt; cfg.CreateMap&lt;Employee, EmployeeViewModel&gt;()); <span class="comment">// 設定Model間的對映(左：來源類型,右：目標類型)</span></span><br><span class="line">    config.AssertConfigurationIsValid(); <span class="comment">//驗證類型映射(如果映射失敗會報錯)</span></span><br><span class="line">    <span class="keyword">var</span> mapper = config.CreateMapper(); <span class="comment">// 建立 Mapper</span></span><br><span class="line">    <span class="keyword">var</span> result = mapper.Map&lt;IEnumerable&lt;EmployeeViewModel&gt;&gt;(employeeList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊說明一下config.AssertConfigurationIsValid()的功能：<br>如果我們對映時發生異常(EX：欄位名稱不一致時或是映射未定義等等…)，加入這行會報錯誤訊息，讓我們來測試一下，將EmployeeViewModel的Name改成Name1，並更改對應的View。這時候產生的結果如下：</p><p><img src="/img/20201208/3.png"><br>Name因為找不到對應欄位所以無法呈現資料，但我們無法直觀看出問題在哪。<br>這時候讓我們加入config.AssertConfigurationIsValid()後，產生的結果如下：</p><p><img src="/img/20201208/4.png"><br>AutoMapper會明確告訴我們哪個欄位沒有對應到。其他錯誤情況請自行測試看看。</p><h2 id="集中管理使用"><a href="#集中管理使用" class="headerlink" title="集中管理使用"></a>集中管理使用</h2><p>如果有多組類別需要對映，我們可以建立一個profile檔案去<strong>繼承Automapper的profile</strong>，接著在建構式裡將需要的轉換關係都建立出來。就可以集中管理這些mapping。</p><p>Profile：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MappingProfile</span> : <span class="title">Profile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MappingProfile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CreateMap&lt;Employee, EmployeeViewModel&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...使用 CreateMap&lt;&gt; 建立下一組</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著當我們建立 Mapper 時，就可以直接用 AddProfile 和建立好的 Profile 來直接讀入對映關係：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt; cfg.AddProfile&lt;MappingProfile&gt;()); <span class="comment">//讀取Profile並設定對映</span></span><br><span class="line">    config.AssertConfigurationIsValid(); </span><br><span class="line">    <span class="keyword">var</span> mapper = config.CreateMapper(); </span><br><span class="line">    <span class="keyword">var</span> result = mapper.Map&lt;IEnumerable&lt;EmployeeViewModel&gt;&gt;(employeeList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MapperConfiguration 的時候也可以額外去做多次 AddProfile 和 CreateMap，因此可以按照實務上的運用去做分類和整理。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//設定多組對映</span></span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        cfg.AddProfile&lt;MappingProfile&gt;();</span><br><span class="line">        cfg.CreateMap&lt;Employee, EmployeeOtherViewModel&gt;();</span><br><span class="line">    &#125;); </span><br><span class="line">    config.AssertConfigurationIsValid();</span><br><span class="line">    <span class="keyword">var</span> mapper = config.CreateMapper();</span><br><span class="line">    <span class="keyword">var</span> result = mapper.Map&lt;IEnumerable&lt;EmployeeOtherViewModel&gt;&gt;(employeeList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="導入DI"><a href="#導入DI" class="headerlink" title="導入DI"></a>導入DI</h2><p>至 NuGet 安裝 AutoMapper DI 用的套件：AutoMapper.Extensions.Microsoft.DependencyInjection<br><img src="/img/20201208/5.png"></p><blockquote><p>因為該套件相依AutoMapper，會一起自動安裝AutoMapper，所以實際上可以只裝這個就好</p></blockquote><p>在Startup.cs 註冊 Service，並加入驗證</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">    services.AddAutoMapper(<span class="keyword">typeof</span>(Startup));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, ... , IMapper mapper</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mapper.ConfigurationProvider.AssertConfigurationIsValid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller 注入取得Mapper</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AutomapperCore.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmployeeController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IMapper _mapper;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Employee&gt; _employeeList;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EmployeeController</span>(<span class="params">IMapper mapper</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._mapper = mapper;</span><br><span class="line"></span><br><span class="line">            _employeeList = <span class="keyword">new</span> List&lt;Employee&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Employee&#123; Id=<span class="number">1</span>, Name=<span class="string">&quot;Amy&quot;</span>, Phone=<span class="string">&quot;0911334455&quot;</span>, Age=<span class="number">25</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Employee&#123; Id=<span class="number">2</span>, Name=<span class="string">&quot;Tom&quot;</span>, Phone=<span class="string">&quot;0912554433&quot;</span>, Age=<span class="number">28</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Employee&#123; Id=<span class="number">3</span>, Name=<span class="string">&quot;Andy&quot;</span>, Phone=<span class="string">&quot;0912112299&quot;</span>, Age=<span class="number">30</span> &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _mapper.ConfigurationProvider.AssertConfigurationIsValid();</span><br><span class="line">            <span class="keyword">var</span> result = _mapper.Map&lt;IEnumerable&lt;EmployeeViewModel&gt;&gt;(_employeeList);</span><br><span class="line">            <span class="keyword">return</span> View(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過建構式注入 IMapper 即可自動取得所有Profile，並直接呼叫Map()方法對映，達成程式碼簡潔、低耦合的好處</p><h2 id="延伸使用"><a href="#延伸使用" class="headerlink" title="延伸使用"></a>延伸使用</h2><p>(<strong>下列範例已將 EmployeeViewModel 的 Name 欄位改成 FullName</strong>)</p><h4 id="反轉對映"><a href="#反轉對映" class="headerlink" title="反轉對映"></a>反轉對映</h4><p>當你的類別之間可能需要往回轉型，或是一時分不清是哪個Model要對應到哪個Model，那可以加上ReverseMap()實現雙向映射，以免轉來轉去出錯。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateMap&lt;Employee, EmployeeViewModel&gt;().ReverseMap();</span><br></pre></td></tr></table></figure><h4 id="客製化對映"><a href="#客製化對映" class="headerlink" title="客製化對映"></a>客製化對映</h4><p>在分層架構時會建立自己的Model，有時候可能實際上我們並不一定每個欄位的名稱都是一樣的、或者需要對Model進行特殊處理，那就可以用以下方法來處理：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateMap&lt;Employee, EmployeeViewModel&gt;().ForMember(des =&gt; des.FullName, opt =&gt; opt.MapFrom(src =&gt; src.Name));</span><br></pre></td></tr></table></figure><p>如果是改變欄位資料或合併，那就可以用以下方法來處理：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateMap&lt;Employee, EmployeeViewModel&gt;().ForMember(des =&gt; des.FullName, opt =&gt; opt.MapFrom(src =&gt; <span class="string">$&quot;<span class="subst">&#123;src.Id&#125;</span>：<span class="subst">&#123;src.Name&#125;</span>&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="/img/20201208/6.png"></p><h4 id="忽略對映"><a href="#忽略對映" class="headerlink" title="忽略對映"></a>忽略對映</h4><p>如果兩個類別之間大多數欄位雖然對映，但某幾個欄位是沒有對映的，來源資料並沒有某個目標資料需要的欄位，如果直接Map()對映，就會發生找不到對映欄位的錯誤。這時候就可以使用 Ignore 來忽略掉指定的欄位。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateMap&lt;Employee, EmployeeViewModel&gt;().ForMember(des =&gt; des.FullName, src =&gt; src.Ignore());</span><br></pre></td></tr></table></figure><p>##結語<br>這篇把 AutoMapper 運用在 .Net Core的基本用法和設定介紹完了，並利用.Net Core DI的特性集中管理，將這些類別轉換對映的設定都集中在一個地方</p><p>如果要運用在ASP.NET MVC 上可以參考網路較舊的教學文，但要注意新版的AutoMapper的設定與舊版有所差異，其他較進階的用法如多個物件對映至一個類別、複雜結構類別對映至扁平化類別，可以參考官方文件</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在撰寫專案時，經常會碰到資料類別對映的處理，例如ViewModel和實際Entity之間的對應，或是層與層之間的轉換。常見的處理方式如下：&lt;/p&gt;</summary>
    
    
    
    <category term=".NETCore" scheme="https://timchen0409.github.io/categories/NETCore/"/>
    
    
    <category term=".NET Core" scheme="https://timchen0409.github.io/tags/NET-Core/"/>
    
    <category term="Backend" scheme="https://timchen0409.github.io/tags/Backend/"/>
    
    <category term="C#" scheme="https://timchen0409.github.io/tags/C/"/>
    
    <category term="Automapper" scheme="https://timchen0409.github.io/tags/Automapper/"/>
    
  </entry>
  
  <entry>
    <title>在.NET Core MVC 使用 ClosedXML 匯出Excel</title>
    <link href="https://timchen0409.github.io/2020/12/03/net-core-closedXML/"/>
    <id>https://timchen0409.github.io/2020/12/03/net-core-closedXML/</id>
    <published>2020-12-02T17:20:43.000Z</published>
    <updated>2021-01-06T12:57:45.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在後台常常需要有報表匯出Excel的功能，過往是使用<a href="https://github.com/nissl-lab/npoi">NPOI</a>去實作，近期專案決定使用另一套 Eecel 程式庫 ClosedXML，所以簡單練習紀錄一下</p><a id="more"></a><h2 id="新增-NET-Core-MVC專案"><a href="#新增-NET-Core-MVC專案" class="headerlink" title="新增.NET Core MVC專案"></a>新增.NET Core MVC專案</h2><p><img src="/img/20201203/ClosedXML1.png"></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>工具列→專案→管理NuGet套件→瀏覽→搜尋輸入ClosedXML→安裝</p><p><img src="/img/20201203/ClosedXML2.png"></p><h2 id="測試環境設定"><a href="#測試環境設定" class="headerlink" title="測試環境設定"></a>測試環境設定</h2><p>新增Model,Controller 和 View，這邊不做資料庫等設定，直接產生資料與呈現。</p><p>Model：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ProductName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> UnitPrice &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Quantity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ClosedXMLExample.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Product&gt; productList;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductController</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            productList = <span class="keyword">new</span> List&lt;Product&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Product&#123; Id=<span class="number">1</span>,ProductName=<span class="string">&quot;Apple&quot;</span>,UnitPrice=<span class="number">30.5</span>m,Quantity=<span class="number">4</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Product&#123; Id=<span class="number">2</span>,ProductName=<span class="string">&quot;Banana&quot;</span>,UnitPrice=<span class="number">40</span>,Quantity=<span class="number">8</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Product&#123; Id=<span class="number">3</span>,ProductName=<span class="string">&quot;Orange&quot;</span>,UnitPrice=<span class="number">20</span>,Quantity=<span class="number">10</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Product&#123; Id=<span class="number">4</span>,ProductName=<span class="string">&quot;Watermelon&quot;</span>,UnitPrice=<span class="number">100</span>,Quantity=<span class="number">2</span>&#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> View(productList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>檢視：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@model IEnumerable&lt;ClosedXMLExample.Models.Product&gt;</span><br><span class="line"></span><br><span class="line">@&#123;</span><br><span class="line">    ViewData[<span class="string">&quot;Title&quot;</span>] = <span class="string">&quot;Index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;button <span class="keyword">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;Export Excel&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;table <span class="keyword">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.Id)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.ProductName)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.UnitPrice)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                @Html.DisplayNameFor(model =&gt; model.Quantity)</span><br><span class="line">            &lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        @foreach (<span class="keyword">var</span> item <span class="keyword">in</span> Model)</span><br><span class="line">        &#123;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.Id)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.ProductName)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.UnitPrice)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    @Html.DisplayFor(modelItem =&gt; item.Quantity)</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>到這邊前置作業就結束，到這邊可以看到網頁可以顯示商品銷售資料，並有一顆匯出Excel按鈕。</p><p><img src="/img/20201203/ClosedXML3.png"></p><h2 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h2><p>之後至ProductController 引用命名空間並 新增Action</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ClosedXML.Excel;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">ExportExcel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//取得欄位名稱</span></span><br><span class="line">    <span class="keyword">var</span> columnNameList = <span class="keyword">typeof</span>(Product).GetProperties().Select(c =&gt; c.Name).ToList();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> contentType = <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> fileName = <span class="string">&quot;ProductsReport.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立Excel</span></span><br><span class="line">    <span class="keyword">var</span> workbook = <span class="keyword">new</span> XLWorkbook();</span><br><span class="line">    IXLWorksheet worksheet = workbook.Worksheets.Add(<span class="string">&quot;ProductsSale&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//設定標題列名稱與樣式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= columnNameList.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        worksheet.Cell(<span class="number">1</span>, i).Value = columnNameList[i - <span class="number">1</span>];</span><br><span class="line">        worksheet.Cell(<span class="number">1</span>, i).Style.Fill.SetBackgroundColor(XLColor.Red);</span><br><span class="line">        worksheet.Cell(<span class="number">1</span>, i).Style.Font.SetFontSize(<span class="number">12</span>);</span><br><span class="line">        worksheet.Cell(<span class="number">1</span>, i).Style.Font.SetBold();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= productList.Count(); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        worksheet.Cell(j + <span class="number">1</span>, <span class="number">1</span>).Value = productList[j - <span class="number">1</span>].Id;</span><br><span class="line">        worksheet.Cell(j + <span class="number">1</span>, <span class="number">2</span>).Value = productList[j - <span class="number">1</span>].ProductName;</span><br><span class="line">        worksheet.Cell(j + <span class="number">1</span>, <span class="number">3</span>).Value = productList[j - <span class="number">1</span>].UnitPrice;</span><br><span class="line">        worksheet.Cell(j + <span class="number">1</span>, <span class="number">4</span>).Value = productList[j - <span class="number">1</span>].Quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寫入檔案</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        workbook.SaveAs(stream);</span><br><span class="line">        <span class="keyword">var</span> content = stream.ToArray();</span><br><span class="line">        <span class="keyword">return</span> File(content, contentType, fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>並調整View裡面按鈕的部份。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;button <span class="keyword">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> asp-action=<span class="string">&quot;ExportExcel&quot;</span>&gt;Export Excel&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>之後點選按鈕匯出結果如下：</p><p><img src="/img/20201203/ClosedXML4.png"></p><p>輕鬆地完成匯出報表的功能</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在後台常常需要有報表匯出Excel的功能，過往是使用&lt;a href=&quot;https://github.com/nissl-lab/npoi&quot;&gt;NPOI&lt;/a&gt;去實作，近期專案決定使用另一套 Eecel 程式庫 ClosedXML，所以簡單練習紀錄一下&lt;/p&gt;</summary>
    
    
    
    <category term=".NETCore" scheme="https://timchen0409.github.io/categories/NETCore/"/>
    
    
    <category term=".NET Core" scheme="https://timchen0409.github.io/tags/NET-Core/"/>
    
    <category term="Backend" scheme="https://timchen0409.github.io/tags/Backend/"/>
    
    <category term="C#" scheme="https://timchen0409.github.io/tags/C/"/>
    
    <category term="ClosedXML" scheme="https://timchen0409.github.io/tags/ClosedXML/"/>
    
  </entry>
  
</feed>
